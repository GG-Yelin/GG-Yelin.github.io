<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2025/04/03/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%20%E4%B8%8E%20%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/"/>
      <url>/2025/04/03/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%20%E4%B8%8E%20%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="第二章-Java内存区域-与-内存溢出异常"><a href="#第二章-Java内存区域-与-内存溢出异常" class="headerlink" title="第二章 Java内存区域 与 内存溢出异常"></a>第二章 Java内存区域 与 内存溢出异常</h1><h2 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1. 运行时数据区域"></a>1. 运行时数据区域</h2><ul><li>线程隔离：线程创建时创建该区域，线程退出时释放该区域；</li><li>线程共享：虚拟机启动时创建该区域，退出时释放。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29511296/1742825717620-d932f0cb-d833-4260-b4ae-659cb7a6015a.png" alt="img"></p><h3 id="1-1-PC寄存器（Program-Counter-Regiter）"><a href="#1-1-PC寄存器（Program-Counter-Regiter）" class="headerlink" title="1.1. PC寄存器（Program Counter Regiter）"></a>1.1. PC寄存器（Program Counter Regiter）</h3><ol><li><p>记录当前线程正在执行的字节码指令的地址。</p></li><li><p>如果当前线程执行的是本地（Native）方法，计数器值为空。</p></li><li><p>线程私有。</p></li><li><p>多线程环境下，CPU时间片轮转执行，需要程序计数器记录当前线程执行到的字节码指令地址。</p></li></ol><h3 id="1-2-虚拟机栈（VM-Stack）"><a href="#1-2-虚拟机栈（VM-Stack）" class="headerlink" title="1.2. 虚拟机栈（VM Stack）"></a>1.2. 虚拟机栈（VM Stack）</h3><ol><li><p>每个方法执行时，会创建一个栈帧。每一个方法从调用到执行完成，对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。栈帧包括：</p></li><li><p><strong>本地变量表</strong>：存储方法参数和方法内部定义的局部变量，包括基本数据类型、对象引用（reference）、returnAddress类型，局部变量表的最小单位为局部变量槽（Slot）。</p></li><li><p>long、double类型占用两个连续的变量槽，其余类型占用一个。</p></li><li><p>局部变量表所需内存空间在 <strong>编译期</strong> 间完成分配。</p></li><li><p><strong>操作数栈</strong>：方法执行过程中，字节码指令会往操作数栈中写入和提取数据。</p></li><li><p>例如加法运算，会先将两个操作数入栈，在执行加法操作时从操作数栈中取出两个操作数相加，再将结果入栈。</p></li><li><p><strong>动态链接</strong>：每个栈帧包含一个指向运行时常量池中该栈帧所属方法的引用，这个引用为了支持方法调用过程中的动态链接。</p></li><li><p>Java源文件在被编译为字节码文件时，所有方法调用指令都是符号引用，而不是方法在实际运行时内存布局中的入口地址（直接引用）。</p></li><li><p>静态链接：一部分符号引用在类加载阶段或第一次使用时被转化为直接引用；</p></li><li><p>动态链接：另外一部分在每次运行期间转化为直接引用。</p></li><li><p><strong>方法返回地址</strong>：保存方法被调用的地址信息，用于在方法结束时返回到被调用的位置。</p></li><li><p>方法正常退出时，调用者的程序计数器作为返回地址；</p></li><li><p>方法异常退出时，通过异常处理器表来确定。</p></li><li><p>JVM规范规定两种异常</p></li><li><p>StackOverflowError异常：栈深度大于虚拟机允许的深度。</p></li><li><p>OutOfMemoryErrory异常：栈容量可以动态扩展时，无法申请到足够内存。</p></li></ol><h3 id="1-3-本地方法栈（Native-Method-Stacks）"><a href="#1-3-本地方法栈（Native-Method-Stacks）" class="headerlink" title="1.3. 本地方法栈（Native Method Stacks）"></a>1.3. 本地方法栈（Native Method Stacks）</h3><ol><li>与虚拟机栈类似，本地方法栈为虚拟机执行本地方法（Native）服务。</li></ol><h3 id="1-4-堆（Heap）"><a href="#1-4-堆（Heap）" class="headerlink" title="1.4. 堆（Heap）"></a>1.4. 堆（Heap）</h3><ol><li>存储对象实例。<strong>几乎</strong> 所有的对象实例都在此区域分配内存（逃逸技术）。</li><li>OutOfMemoryError异常：堆中没有内存完成实例分配，并且也无法扩展。</li></ol><h3 id="1-5-方法区（Method-Area）"><a href="#1-5-方法区（Method-Area）" class="headerlink" title="1.5. 方法区（Method Area）"></a>1.5. 方法区（Method Area）</h3><ol><li>存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</li><li>OutOfMemoryError异常：方法区无法完成内存分配。</li></ol><h3 id="1-6-运行时常量池（Runtime-Constant-Pool）"><a href="#1-6-运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="1.6. 运行时常量池（Runtime Constant Pool）"></a>1.6. 运行时常量池（Runtime Constant Pool）</h3><ol><li>运行时常量池是方法区的一部分。Class文件中除了类的版本、字段、方法、接口等描述信息外，还有常量池表，用于存放编译器生成的各种字面量与符号引用，这部分内容在累加载后存放在方法区的运行时常量池中。</li><li>OutOfMemoryError异常：运行时常量池无法完成内存分配。</li></ol><h3 id="1-7-直接内存（Direct-Memory）"><a href="#1-7-直接内存（Direct-Memory）" class="headerlink" title="1.7. 直接内存（Direct Memory）"></a>1.7. 直接内存（Direct Memory）</h3><ol><li>NIO类中引入一种基于 通道（Channel） 和 缓冲区（Buffer）的I&#x2F;O方式，可以使用Native函数库直接分配堆外内存，通过一个存储在Java堆中的 DirectByteBuffer对象作为该内存的引用来操作。这样能避免在Java堆和Ntive堆中来回复制数据，提高性能。</li><li>不是JVM运行时数据区的一部分。</li><li>OutOfMemoryError异常：各内存区域超出物理内存限制。</li></ol><h2 id="2-Hotspot虚拟机对象揭秘"><a href="#2-Hotspot虚拟机对象揭秘" class="headerlink" title="2. Hotspot虚拟机对象揭秘"></a>2. Hotspot虚拟机对象揭秘</h2><h3 id="2-1-对象的创建（new指令）"><a href="#2-1-对象的创建（new指令）" class="headerlink" title="2.1. 对象的创建（new指令）"></a>2.1. 对象的创建（new指令）</h3><ol><li><p><strong>检查类是否已被加载、解析和初始化</strong></p></li><li><p>检查new指令的参数是否能在常量池中定位一个类的符号引用，检查符号引用代表的类是否已被加载、解析和初始化。</p></li><li><p>若类未被加载，需先执行类加载过程。</p></li><li><p><strong>为对象分配内存</strong></p></li><li><p>类加载后可确定对象所需内存大小，两种内存分配方式</p></li><li><p>指针碰撞</p></li><li><p>空闲列表</p></li><li><p>内存分配时存在并发问题，两种解决方案</p></li><li><p>CAS+重试</p></li><li><p>本地线程分配缓冲（TLAB）</p></li><li><p><strong>将分配的内存空间初始化为零值</strong></p></li><li><p>若使用TLAB，可提前至TLAB分配时就进行初始化零值</p></li><li><p><strong>设置对象头信息</strong></p></li><li><p><strong>执行<init>()方法（构造方法）</strong></p></li></ol><h3 id="2-2-对象的内存布局"><a href="#2-2-对象的内存布局" class="headerlink" title="2.2. 对象的内存布局"></a>2.2. 对象的内存布局</h3><ol><li><p><strong>对象头（Header）</strong></p></li><li><p><strong>存储对象自身的运行时数据（Mark Work）</strong></p></li><li><p>在32位和64位虚拟机中分别占32比特和64比特</p></li><li><p>动态定义的数据结构，根据对象的不同状态，存储不同内容</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29511296/1743238320699-5fe5654d-3a84-4a6b-baf0-ff9ecf03eb14.png" alt="img"></p><ol><li><p><strong>类型指针</strong></p></li><li><p>对象指向它的类型元数据指针</p></li><li><p>如果对象是一个Java数组，那么对象头必须记录数组长度</p></li><li><p><strong>实例数据（Instance Data）</strong></p></li><li><p>对象的各种类型的字段内容</p></li><li><p><strong>对齐填充（Padding）</strong></p></li><li><p>Hotspot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，即任何对象的大小必须是8字节的整数倍。对象头已是8字节的整数倍，如果实例数据没有对齐，需要通过对齐填充来补全。</p></li></ol><h3 id="2-3-对象的访问定位"><a href="#2-3-对象的访问定位" class="headerlink" title="2.3. 对象的访问定位"></a>2.3. 对象的访问定位</h3><ul><li>对象的访问是通过 reference数据 来访问。主流有两种访问方式：</li></ul><ol><li><p><strong>句柄</strong></p></li><li><p>Java堆中划分一块内存作为句柄池，reference存储的是对象的句柄地址，句柄中包含 对象实例数据和类型数据 的地址信息。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29511296/1743240760540-afb7ca23-f37d-4d37-8268-8cf8cb4dad75.png" alt="img"></p><ol><li><p><strong>直接指针</strong></p></li><li><p>Java堆中的对象需要考虑存放访问类型数据的相关信息，reference存储的是对象地址。</p></li></ol><p><img src="https://cdn.nlark.com/yuque/0/2025/png/29511296/1743240905406-d20fec83-f4a9-412a-a24a-9d232241ae8f.png" alt="img"></p><ol><li><p><strong>各自优势</strong></p></li><li><p>句柄：reference存储的是稳定句柄地址，对象被移动时只会改变句柄中的实例数据指针，reference本身不会改变。（GC时对象移动非常普遍）</p></li><li><p>直接指针：节省一次指针定位的时间开销，访问速度快。</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
